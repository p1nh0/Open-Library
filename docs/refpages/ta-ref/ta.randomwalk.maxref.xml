<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="ta.randomwalk" module="max" category="Math">
	<digest>
		Random walk generator
	</digest>
	<description>
		Performs a &quot;drunken&quot; walk by outputting random numbers within a specified step and output range.
		Similar to <o>drunk</o> and <o>ta.drunk</o> but it allows you to define the walk's direction. 
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Tiago Ã‚ngelo
		</metadata>
		<metadata name="tag">
			TA-Library
		</metadata>
		<metadata name="tag">
			Math
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				bang Outputs Random Step, int Sets Value
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set minimum
			</digest>
			<description>
				Sets the minimum output value, inclusively.
				Also resets the <m>clipmin</m> value (see clipmin message)
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Set maximum
			</digest>
			<description>
				Sets the maximum output value, inclusively.
				Also resets the <m>clipmax</m> value (see clipmax message)
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Set randomness (range fraction)
			</digest>
			<description>
				Set the step size, where the step size is equal to the range (max minus min values) multiplied by the randomness value. So, if the range is equal to 20 and the randomness value is 0.5, the step size will be 10.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Random Walk Output
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="max" optional="1" type="int">
			<digest>
				Set the maximum value for output, inclsively 
			</digest>
			<description>
				Sets the maximum output value inclusively, meaning that the random generator can output numbers equal to this value. (default min = 0, max = 127, randomness = 0.2, direction = 2)
			</description>
		</objarg>
		<objarg name="min-max" optional="1" type="list">
			<digest>
				Range: Minimum and Maximum Values
			</digest>
			<description>
				When two integers are provided as an argument, the first integer sets the minimum value and the second integer sets the maximum value.
				These are inclusive, meaning that the random generator can output numbers equal to the lower and upper limit. (default min = 0, max = 127, randomness = 0.2, direction = 2)
			</description>
		</objarg>
		<objarg name="min-max-rand" optional="1" type="list">
			<digest>
				Set minimum, maximum and randomness
			</digest>
			<description>
				When three integers are provided as an argument, the first integer sets the minimum value and the second integer sets the maximum. These are inclusive, meaning that the random generator can output numbers equal to these limit.
				While the third argument sets the randomness value, which determines the output step size, where the step size is equal to the range (minimum minus maximum) multiplied by the randomness value.
				(default min = 0, max = 127, randomness = 0.2, direction = 2)
			</description>
		</objarg>
		<objarg name="min-max-rand-direction" optional="1" type="list">
			<digest>
				Set minimum, maximum, randomness and direction.
			</digest>
			<description>
				When four integers are provided as an argument, the first integer sets the minimum value and the second integer sets the maximum. These are inclusive, meaning that the random generator can output numbers equal to these values.
				While the third argument sets the randomness value, which determines the output step size, where the step size is equal to the range (upper minus lower limit) multiplied by the randomness value.
				And the fourth argument sets the walk direction, <m>zero</m> for upwards, <m>one</m> for downwards and <m>2</m> for up and down, which is the default.
				(default min = 0, max = 127, randomness = 0.2, direction = 2)
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output a random value
			</digest>
			<description>
				Causes <o>ta.randomwalk</o> to take a step of random size up or down from its currently stored value, depending on the step direction. 
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set current step and trigger random step
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="input" optional="0" type="float" />
			</arglist>
			<digest>
				See the <m>int</m> message
			</digest>
			<description>
				Converted to <m>int</m>.
			</description>
		</method>
		<method name="in1">
			<arglist>
				<arg name="minimum value" optional="0" type="int" />
			</arglist>
			<digest>
				Set the minimum output value, inclusively
			</digest>
			<description>
				See the <m>min</m> message. (default = 0)
			</description>
		</method>
		<method name="in2">
			<arglist>
				<arg name="maximum value" optional="0" type="int" />
			</arglist>
			<digest>
				Set the maximum output value, inclusively
			</digest>
			<description>
				See the <m>max</m> message. (default = 127)
			</description>
		</method>
		<method name="in3">
			<arglist>
				<arg name="randomness" optional="0" type="int" />
			</arglist>
			<digest>
				Set output step randomness
			</digest>
			<description>
				See the <m>randomness</m> message. (default = 0.2)
			</description>
		</method>
		<method name="min">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set the minimum output value, inclusively
			</digest>
			<description>
				The number is stored as the minimum value that can be output by <o>ta.randomwalk</o>. This will reset the <m>clipmin</m> value automatically (see <m>clipmin</m> message). (default = 0)
			</description>
		</method>
		<method name="max">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set the maximum output value, inclusively
			</digest>
			<description>
				The number is stored as the maximum value that can be output by <o>ta.randomwalk</o>. This will reset the <m>clipmax</m> value automatically (see <m>clipmax</m> message). (default = 127)
			</description>
		</method>
		<method name="clipmin">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Clip lower output values
			</digest>
			<description>
				As the message name suggests, <m>clipmin</m> will clip the output lower values (see <o>clip</o>). Whenever a <m>min</m> value is sent to <o>ta.randomwalk</o> the <m>clipmin</m> will be automatically reset to the <m>min</m> value. (default = 0)
			</description>
		</method>
		<method name="clipmax">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Clip upper output values
			</digest>
			<description>
				As the message name suggests, <m>clipmax</m> will clip the output upper values (see <o>clip</o>). Whenever a <m>max</m> value is set in <o>ta.randomwalk</o> the <m>clipmax</m> will be automatically reset to that <m>max</m> value. (default = 127)
			</description>
		</method>
		<method name="randomness">
			<arglist>
				<arg name="input" optional="0" type="float" />
			</arglist>
			<digest>
				Set output step randomness
			</digest>
			<description>
				Sets the maximum output step size, where the step size is equal to the range (maximum - minimum values) multiplied by the randomness value. So, if the range is equal to 20 and the randomness value is 0.5, the maximum output step size will be 10. When set to &quot;0&quot; <o>ta.randomwalk</o> works just like the <o>counter</o> object.
				(default = 0.2)
			</description>
		</method>
		<method name="direction">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set output step direction
			</digest>
			<description>
				Sets the output step direction. &quot;0&quot; is up,  &quot;1&quot; is down and &quot;2&quot; is up and down. (default = 2)
			</description>
		</method>
		<method name="seed">
			<arglist>
				<arg name="random-seed" optional="0" type="int" />
			</arglist>
			<digest>
				Seed the random number generator
			</digest>
			<description>
				Seeds the object's random generator, which causes a specific (reproducible) sequence of pseudo-random numbers to occur. The number <m>0</m> uses the time elapsed since system startup (an unpredictable value) as the seed, ensuring an unpredictable sequence of numbers.
			</description>
		</method>
		<method name="set">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set the stored value, no output
			</digest>
			<description>
				The word <m>set</m>, followed by a number, sets the stored value to that number without triggering output. The stored value is initially set in the center of the total range (1/2 the maximum value).
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<!--EXAMPLE-->
	<examplelist>
		<example img="" caption="Controlled randomness" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="ta.random" />
		<seealso name="ta.drunk" />
		<seealso name="decide" />
		<seealso name="random" />
		<seealso name="urn" />
		<seealso name="basicchapter10" module="max" type="tutorial" />
	</seealsolist>
	<misc name="Output">
		<entry name="int">
			<description>
				The number sent out the outlet is automatically limited between the <m>clipmin</m> and <m>clipmax</m> values, and differs from the previously stored number by less than the maximum step size (which can be calculated like: step_size = (upper_limit - lower_limit) * randomness).
			</description>
		</entry>
	</misc>
</c74object>
