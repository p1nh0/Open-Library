<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="ta.clocker" module="max" category="Timing">
	<digest>
		Similar to <o>clocker</o>
	</digest>
	<description>
		Counts elapsed time at regular intervals and stops after a predetermined time. 
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Tiago Ângelo
		</metadata>
		<metadata name="tag">
			TA-Library
		</metadata>
		<metadata name="tag">
			Timing
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Start/Stop Metronome
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set Duration in Milliseconds
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Set Metronome Time Interval
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Output Bang When Done
			</digest>
			<description>
				A bang is sent out the outlet when <o>ta.clocker</o> reaches its maximum duration. After that the <o>clocker</o> object inside <o>ta.clocker</o> is stopped. 
			</description>
		</outlet>
		<outlet id="1" type="OUTLET_TYPE">
			<digest>
				Elapsed Time in Milliseconds
			</digest>
			<description>
				Outputs the elapsed time since <o>ta.clocker</o> metronome has started counting. The output will stop when the metronome reaches the maximum duration.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="duration" optional="0" type="int, float, symbol">
			<digest>
				The first argument sets the duration of the <o>ta.clocker</o> metronome. Unlike <o>clocker</o>, <o>ta.clocker</o> will automatically stop when this duration has been reached.
				<br />
				<br />
				Note: While the <o>clocker</o> object lets you specify time in any of Max's standard <link name="maxtime" module="core" type="vignette">time formats</link>, the <m>Duration</m> attribute argument should be used when specifying time in any other time unit besides milliseconds, notevalues or bbu (bars.beats.units).
				<br />
				<br />
				If there is no argument, the initial duration is &quot;1000&quot; milliseconds.
			</digest>

			<description>
				The first argument sets the duration of the <o>ta.clocker</o> metronome. Unlike <o>clocker</o>, <o>ta.clocker</o> will automatically stop when this duration has been reached.
				<br />
				<br />
				Note: While the <o>clocker</o> object lets you specify time in any of Max's standard <link name="maxtime" module="core" type="vignette">time formats</link>, the <m>Duration</m> attribute argument should be used when specifying time in any other time unit besides milliseconds, notevalues or bbu (bars.beats.units).
				<br />
				<br />
				If there is no argument, the initial duration is &quot;1000&quot; milliseconds.
			</description>
		</objarg>
		<objarg name="time-interval" optional="0" type="int, float, symbol">
			<digest>
				The second argument sets an initial value for the time interval at which <o>clocker</o> sends out its output. This time interval can be either a number which specifies time in milliseconds (e.g. clocker 200) or a <link name="maxtime_syntax" module="core" type="vignette">notevalue</link> (e.g. clocker 4nd).
				<br />
				<br />
				Note: While the <o>clocker</o> object lets you specify time in any of Max's standard <link name="maxtime" module="core" type="vignette">time formats</link>, the <m>Interval</m> attribute argument should be used when specifying time in any other time unit besides milliseconds or notevalues.
				<br />
				<br />
				If there is no argument, the initial time interval is set to 5 milliseconds. If notevalue, ticks, or bars.beats.units are specified for the delay interval, the <o>clocker</o> object will not operate unless the transport is running.
			</digest>
			<description>
				The second argument sets an initial value for the time interval at which <o>clocker</o> sends out its output. This time interval can be either a number which specifies time in milliseconds (e.g. clocker 200) or a <link name="maxtime_syntax" module="core" type="vignette">notevalue</link> (e.g. clocker 4nd).
				<br />
				<br />
				Note: While the <o>clocker</o> object lets you specify time in any of Max's standard <link name="maxtime" module="core" type="vignette">time formats</link>, the <m>Interval</m> attribute argument should be used when specifying time in any other time unit besides milliseconds or notevalues.
				<br />
				<br />
				If there is no argument, the initial time interval is set to 5 milliseconds. If notevalue, ticks, or bars.beats.units are specified for the delay interval, the <o>clocker</o> object will not operate unless the transport is running.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				In left inlet: Starts the <o>ta.clocker</o> object.
			</digest>
			<description>
				In left inlet: Starts the <o>ta.clocker</o> object. If the <o>ta.clocker</o> object is not running, a <m>bang</m> message will start the count. If the <o>ta.clocker</o> object is running, a <m>bang</m> message will reset the count.
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="non-zero-to-start" optional="0" type="int" />
			</arglist>
			<digest>
				In left inlet: Any non-zero number starts the <o>ta.clocker</o> object.
			</digest>
			<description>
				In left inlet: Any non-zero number starts the <o>ta.clocker</o> object. The time elapsed since <o>ta.clocker</o> was started is sent out the right outlet at regular intervals. 0 stops the <o>ta.clocker</o> object. If <o>ta.clocker</o> is already running when it receives a non-zero number, it continues reporting the elapsed time at regular intervals from that new point, but without resetting the clock time to 0.
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="non-zero-to-start" optional="0" type="float" />
			</arglist>
			<digest>
				In left inlet: Any non-zero number starts the <o>ta.clocker</o> object.
			</digest>
			<description>
				In left inlet: Any non-zero number starts the <o>ta.clocker</o> object. The time elapsed since <o>ta.clocker</o> was started is sent out the right outlet at regular intervals. 0 stops the <o>ta.clocker</o> object. If <o>ta.clocker</o> is already running when it receives a non-zero number, it continues reporting the elapsed time at regular intervals from that new point, but without resetting the clock time to 0. The <o>ta.clocker</o> object’s minimum interval time is 0.02 second.
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="input" optional="0" type="list" />
			</arglist>
			<digest>
				ITM-time-list
			</digest>
			<description>
				In the middle/right inlet: A list may be used to specify time in one of the Max <link name="maxtime" module="core" type="vignette">time formats</link>.
			</description>
		</method>
		<method name="anything">
			<arglist>
				<arg name="interval" optional="0" type="list" />
			</arglist>
			<digest>
				Same as <m>list</m>.
			</digest>
			<description>
				Same as <m>list</m>.
			</description>
		</method>
		<method name="clock">
			<arglist>
				<arg name="setclock object name" optional="0" type="symbol" />
			</arglist>
			<digest>
				The word <m>clock</m>, followed by the name of an existing <m>setclock</m> object, sets the <o>ta.clocker</o> object to be controlled by that <m>setclock</m> object rather than by Max’s internal millisecond clock.
			</digest>
			<description>
				The word <m>clock</m>, followed by the name of an existing <m>setclock</m> object, sets the <o>ta.clocker</o> object to be controlled by that <m>setclock</m> object rather than by Max’s internal millisecond clock. The word <m>clock</m> by itself sets the <o>ta.clocker</o> object back to using Max’s regular millisecond clock.
			</description>
		</method>
		<method name="stop">
			<arglist />
			<digest>
				In left inlet: Stops the <o>clocker</o> object.
			</digest>
			<description>
				In left inlet: Stops the <o>clocker</o> object.
			</description>
		</method>
		<method name="reset">
			<arglist />
			<digest>
				In left inlet: Resets the elapsed time to 0 without stopping or restarting the clock; <o>ta.clocker</o> continues to report the new elapsed time at the same regular interval, until the maximum duration has been reached.
			</digest>
			<description>
				In left inlet: Resets the elapsed time to 0 without stopping or restarting the clock; <o>ta.clocker</o> continues to report the new elapsed time at the same regular interval, until the maximum duration has been reached. This message is meaningless when the <o>ta.clocker</o> is not running, since it always resets to 0 anyway when stopped.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="active" get="1" set="1" type="int" size="1">
			<digest>
				Active
			</digest>
			<description>
				Turns the <o>clocker</o> object on and off.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Active" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autostart" get="1" set="1" type="int" size="1">
			<digest>
				Autostart
			</digest>
			<description>
				If turned on (non-zero) the <o>clocker</o> object will begin running automatically at the time specified with the autostarttime attribute.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autostart" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="autostarttime" get="1" set="1" type="atom" size="10">
			<digest>
				Autostart Time
			</digest>
			<description>
				If the autostart attribute is enabled (non-zero) the <o>clocker</o> object will begin running automatically at the time specified with the this attribute. The autostart operates as a <o>timepoint</o> object that is internal to the <o>clocker</o> object.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Autostart Time" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="time" />
				<attribute name="units" get="1" set="1" type="atom" size="3" value="ticks bars.beats.units notevalues" />
			</attributelist>
		</attribute>
		<attribute name="defer" get="1" set="1" type="float" size="1">
			<digest>
				Defer
			</digest>
			<description>
				Turn this on to send output in the low-priority queue.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Defer" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
				<attribute name="timeobj" get="1" set="1" type="atom" size="1" value="interval" />
			</attributelist>
		</attribute>
		<attribute name="interval" get="1" set="1" type="atom" size="10">
			<digest>
				Interval
			</digest>
			<description>
				Sets the The time interval at which the <o>clocker</o> object sends out a <m>bang</m>. Time can be specified in any of the <link name="maxtime" module="core" type="vignette">time formats</link> used in Max.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Interval" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="time" />
				<attribute name="units" get="1" set="1" type="atom" size="7" value="ms hh:mm:ss ticks bars.beats.units notevalues hz samples" />
			</attributelist>
		</attribute>
		<attribute name="duration" get="1" set="1" type="atom" size="10">
			<digest>
				Duration
			</digest>
			<description>
				Sets the metronome duration of <o>ta.clocker</o>. Duration can be specified in any of the <link name="maxtime" module="core" type="vignette">time formats</link> used in Max.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Duration" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="time" />
				<attribute name="units" get="1" set="1" type="atom" size="7" value="ms hh:mm:ss ticks bars.beats.units notevalues hz samples" />
			</attributelist>
		</attribute>
		<attribute name="quantize" get="1" set="1" type="atom" size="10">
			<digest>
				Quantization
			</digest>
			<description>
				Send output only on the specified time-boundary if appropriate. This is achieved by making internal adjustments to the times used for sending output. The quantization can be specified in the following <link name="maxtime" module="core" type="vignette">time formats</link>: bars.beats.units, ticks or note values.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Quantization" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="time" />
				<attribute name="units" get="1" set="1" type="atom" size="3" value="ticks bars.beats.units notevalues" />
			</attributelist>
		</attribute>
		<attribute name="transport" get="1" set="1" type="symbol" size="1">
			<digest>
				Transport
			</digest>
			<description>
				This attribute names a master time transport. If the time is specified using a 'relative' unit (for example: ticks, bars.beats.units, or notevalues), then the named transport is used to determine delay times based on tempo, time-signature, and other related information.
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Timing" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Transport" />
				<attribute name="timeobj" get="1" set="1" type="atom" size="1" value="interval" />
			</attributelist>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="clocker" />
		<seealso name="translate" />
		<seealso name="transport" />
		<seealso name="metro" />
		<seealso name="setclock" />
		<seealso name="ta.bpm-ms" />
		<seealso name="ta.tap" />
	</seealsolist>
	<misc name="Output">
		<entry name="bang">
			<description>
				Out left outlet: bang when <o>ta.clocker</o> metronome has reached its maximum duration.
			</description>
		</entry>
		<entry name="float">
			<description>
				Out right outlet: elapsed time in milliseconds sent at regular time intervals (defined by the <m>interval</m> argument/attribute). Once the metronome has reached its maximum duration <o>ta.clocker</o> will stop sending values.
			</description>
		</entry>
	</misc>
</c74object>
