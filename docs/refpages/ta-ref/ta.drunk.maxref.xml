<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="ta.drunk" module="max" category="Math">
	<digest>
		Output random numbers within a step range and according to a given randomness amount (similar to <o>drunk</o> step size)
	</digest>
	<description>
		Performs a &quot;drunken&quot; walk by outputting random numbers within a specified step and output range.
		Similar to <o>drunk</o> but it allows to define a lower limit.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Tiago Ã‚ngelo
		</metadata>
		<metadata name="tag">
			TA-Library
		</metadata>
		<metadata name="tag">
			Math
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				bang Outputs Random Step, int Sets Value
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set Lower Limit
			</digest>
			<description>
				Sets the minimum output value, inclusively. 
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Set Upper Limit
			</digest>
			<description>
				Sets the maximum output value, inclusively. 
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Set randomness (range fraction)
			</digest>
			<description>
				Set the step size, where the step size is equal to the range (upper minus lower limit) multiplied by the randomness value. So, if the range is equal to 20 and the randomness value is 0.5, the step size will be 10.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Random Walk Output
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="upper limit" optional="1" type="int">
			<digest>
				Set the upper limit for output, inclusively
			</digest>
			<description>
				Sets the maximum number produced. If this argument is not provided, the maximum limit is set to 127.
			</description>
		</objarg>
		<objarg name="lower and upper limit" optional="1" type="list">
			<digest>
				Range: Lower and Upper Limit
			</digest>
			<description>
				When two integers are provided as an argument, the first integer sets the lower limit and the second integer sets the upper limit.
				These are inclusive, meaning that the random generator can output numbers equal to the lower and upper limit.
			</description>
		</objarg>
		<objarg name="range and randomness" optional="1" type="list">
			<digest>
				Set the lower and upper limit, plus randomness (similar to <o>drunk</o> step size)
			</digest>
			<description>
				When three integers are provided as an argument, the first integer sets the lower limit and the second integer sets the upper limit. These are inclusive, meaning that the random generator can output numbers equal to the lower and upper limit.
				While the third argument sets the randomness value, which determines the output step size, where the step size is equal to the range (upper minus lower limit) multiplied by the randomness value.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output a random value
			</digest>
			<description>
				Causes <o>ta.drunk</o> to take a step of random size up or down from its currently stored value. It updates the stored value and outputs it.
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Replace the current value
			</digest>
			<description>
				The number replaces the stored value and is sent out the outlet.
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg name="input" optional="0" type="float" />
			</arglist>
			<digest>
				See the <m>int</m> message
			</digest>
			<description>
				Converted to <m>int</m>.
			</description>
		</method>
		<method name="in1">
			<arglist>
				<arg name="lower limit" optional="0" type="int" />
			</arglist>
			<digest>
				Set the lower limit, inclusively
			</digest>
			<description>
				In 2nd inlet from the left: The number is stored as the lower limit that can be output by <o>ta.drunk</o>. (default = 0)
			</description>
		</method>
		<method name="in2">
			<arglist>
				<arg name="upper limit" optional="0" type="int" />
			</arglist>
			<digest>
				Set the upper limit, inclusively
			</digest>
			<description>
				In 3rd inlet from the left: The number is stored as the upper limit that can be output by <o>ta.drunk</o>. (default = 127)
			</description>
		</method>
		<method name="in3">
			<arglist>
				<arg name="randomness" optional="0" type="int" />
			</arglist>
			<digest>
				Set randomness
			</digest>
			<description>
				In right inlet: sets the step size, where the step size is equal to the range (upper minus lower limit) multiplied by the randomness value. So, if the range is equal to 20 and the randomness value is 0.5, the step size will be 10.
			</description>
		</method>
		<method name="seed">
			<arglist>
				<arg name="random-seed" optional="0" type="int" />
			</arglist>
			<digest>
				Seed the random number generator
			</digest>
			<description>
				Seeds the object's random generator, which causes a specific (reproducible) sequence of pseudo-random numbers to occur. The number <m>0</m> uses the time elapsed since system startup (an unpredictable value) as the seed, ensuring an unpredictable sequence of numbers.
			</description>
		</method>
		<method name="set">
			<arglist>
				<arg name="input" optional="0" type="int" />
			</arglist>
			<digest>
				Set the stored value, no output
			</digest>
			<description>
				The word <m>set</m>, followed by a number, sets the stored value to that number without triggering output. The stored value is initially set in the center of the total range (1/2 the maximum value).
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<!--EXAMPLE-->
	<examplelist>
		<example img="" caption="Controlled randomness" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="ta.random" />
		<seealso name="decide" />
		<seealso name="random" />
		<seealso name="urn" />
		<seealso name="basicchapter10" module="max" type="tutorial" />
	</seealsolist>
	<misc name="Output">
		<entry name="int">
			<description>
				The number sent out the outlet is automatically limited between lower and upper values, and differs from the previously stored number by less than the maximum step size (which can be calculated like: step_size = (upper_limit - lower_limit) * randomness).
			</description>
		</entry>
	</misc>
</c74object>
