<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="ta.findclosestnote" module="max" category="Notes">
	<digest>
		Find the closest note to a given scale
	</digest>
	<description>
		This js code was developed to constrain input notes within a given musical scale.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Tiago Ã‚ngelo
		</metadata>
		<metadata name="tag">
			TA-Library
		</metadata>
		<metadata name="tag">
			Notes
		</metadata>
		<metadata name="tag">
			MIDI
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Notes to constrain
			</digest>
			<description>
				Given an input scale (a list of pitches), <o>ta.findclosestnote</o> will send the input note through the outlet if the matches one of the notes from the given scale. Otherwise it will search for the nearest note within the given scale.
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set Scale
			</digest>
			<description>
				Sets the scale that will constrain input notes. Sending &quot;-1&quot; to this inlet will clear the scale stored in memory.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Closest Note
			</digest>
			<description>
				If the input note is present in the prestored scale, the input will be passed to the outlet. Otherwise <o>ta.findclosestnote</o> will find and output the closest note to the prestored scale.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="findmode" optional="1" type="int">
			<digest>
				Find Mode
			</digest>
			<description>
				&quot;-1&quot; : favors downwards transitions when the input note is exactly in the middle of two notes from our scale
				<br />
				<br />
				&quot;1&quot; : favors upwards transitions 
				<br />
				<br />
				&quot;0&quot; (default): if the input note is exactly in the middle of two notes from the scale <o>ta.finclosestnote</o> randomly chooses to change upwards or downwards
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="int">
			<arglist>
				<arg name="constrain note" optional="0" type="int" />
			</arglist>
			<digest>
				Constrain note
			</digest>
			<description>
				Takes the input chord and checks if it is recognized from a list of stored chords. This prestored list is a file called &quot;chords-collection.json&quot; and must be loaded into a <o>dict</o> object named &quot;chords-dict&quot;, for <o>ta.chordidentifier</o> to read from it. 
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="scale" optional="0" type="list" />
			</arglist>
			<digest>
				Set Scale
			</digest>
			<description>
				A list sent to the righ inlet sets the scale that will constrain input notes. Sending &quot;-1&quot; to this inlet will clear the scale stored in memory. 
			</description>
		</method>
		<method name="-1">
			<arglist>
				<arg name="clear scale" optional="0" type="int" />
			</arglist>
			<digest>
				Clear Scale
			</digest>
			<description>
				Sending &quot;-1&quot; to the right inlet clears the scale stored in memory. 
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="defer" get="1" set="1" type="int" size="1">
			<digest>
				Defer
			</digest>
			<description>
				&quot;0&quot;: execute on high-priority thread.
				<br />
				<br />
				&quot;1&quot;: execute on low-priority thread.
				(default = 0)
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="0" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Defer" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="findmode" get="1" set="1" type="int" size="1">
			<digest>
				Find Mode
			</digest>
			<description>
				&quot;-1&quot; : favors downwards transitions when the input note is exactly in the middle of two notes from our scale
				<br />
				<br />
				&quot;1&quot; : favors upwards transitions 
				<br />
				<br />
				&quot;0&quot; (default): if the input note is exactly in the middle of two notes from the scale <o>ta.finclosestnote</o> randomly chooses to change upwards or downwards
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="-1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Find Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="type" />
			</attributelist>
		</attribute>
		<attribute name="scale" get="1" set="1" type="list" size="1">
			<digest>
				Set Scale
			</digest>
			<description>
				A list of pitch numbers sets the scale that will constrain input notes on the left inlet.
				<br />
				<br />
				&quot;-1&quot; (default): no scale in memory.
			</description>
			<attributelist>
				<attribute name="basic" get="1" set="1" type="list" size="1" value="1" />
				<attribute name="default" get="1" set="1" type="int" size="1" value="-1" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Find Mode" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="pitch" />
			</attributelist>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="" caption="Constrain MIDI input to musical scale"/>
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="js" />
		<seealso name="Constrain MIDI Input To Scale" />
	</seealsolist>
	<misc name="Output">
		<entry name="int">
			<description>
				Out : input numbers are sent to the outlet whenever they are contained in the prestored list. Otherwise <o>ta.findclosestnote</o> will output the closest note to the scale depending on the <m>findmode</m> attribute.
			</description>
		</entry>
		<entry name="symbol">
			<description>
				Out Max Window: &quot;ta.findclosesnote.js: missing a scale list in right inlet&quot; whenever <o>ta.findclosestnote</o> receives an input in the left inlet without having a prestored scale. 
			</description>
		</entry>
	</misc>
</c74object>
