<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="ta.vossfractal" module="max" category="Math">
	<digest>
		Stochacastic Voss fractal generator
	</digest>
	<description>
		A stochastic (weight-based) Voss fractal generator [1/f fractal algorithm]. The algorithm is composed by N generators, each generating a random number at a given frequency. The frequency of one generat
		(derived from "Computer Music Tutorial: Representations and Strategies for Algorithmic Composition", C. Roads)
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Tiago Ã‚ngelo
		</metadata>
		<metadata name="tag">
			TA-Library
		</metadata>
		<metadata name="tag">
			Math
		</metadata>
		<metadata name="tag">
			Lists
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Causes Random Number Output
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Set minimum
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Set maximum
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				Random Number Output
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="upper limit" optional="1" type="int">
			<digest>
				Upper Limit
			</digest>
			<description>
				If only an integer is provided as an argument, it will set the upper limit for the random generator, while the lower limit is set to default at &quot;0&quot;.
			</description>
		</objarg>
		<objarg name="range" optional="1" type="list">
			<digest>
				Range: Lower and Upper Limit
			</digest>
			<description>
				When two integers are provided as an argument, the first integer sets the lower limit and the second integer sets the upper limit.
				These are inclusive, meaning that the random generator can output numbers equal to the lower and upper limit.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output a random number
			</digest>
			<description>
				In left inlet: Sends out a randomly generated number between the lower and upper limit inclusively. 
			</description>
		</method>
		<method name="in2">
			<arglist>
				<arg name="lower limit" optional="0" type="int" />
			</arglist>
			<digest>
				Set the lower limit, inclusively
			</digest>
			<description>
				In middle inlet: The number is stored as the lower limit for the random output.
			</description>
		</method>
		<method name="in3">
			<arglist>
				<arg name="upper limit" optional="0" type="int" />
			</arglist>
			<digest>
				Set the upper limit, inclusively
			</digest>
			<description>
				In right inlet: The number is stored as the upper limit for the random output.
			</description>
		</method>
		<method name="seed">
			<arglist>
				<arg name="seed-value" optional="0" type="int" />
			</arglist>
			<digest>
				Seed the random generator
			</digest>
			<description>
				In left inlet: The word <m>seed</m>, followed by a number, provides a &quot;seed&quot; value for the random generator, which causes a specific (reproducible) sequence of pseudo-random numbers to occur. The number <m>0</m> uses the time elapsed since system startup (an unpredictable value) as the seed, ensuring an unpredictable sequence of numbers. This unpredictable seed is used by default when the <o>random</o> object is created.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="seed" get="1" set="1" type="int" size="1">
			<digest>
				Seed the random generator
			</digest>
			<description>
				Provides a &quot;seed&quot; value for the random generator, which causes a specific (reproducible) sequence of pseudo-random numbers to occur. The number <m>0</m> uses the time elapsed since system startup (an unpredictable value) as the seed, ensuring an unpredictable sequence of numbers. This unpredictable seed is used by default when the <o>random</o> object is created.
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="" caption="Generate random numbers within a predetermined range." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="ta.drunk" />
		<seealso name="decide" />
		<seealso name="drunk" />
		<seealso name="urn" />
		<seealso name="basicchapter10" module="max" type="tutorial" />
	</seealsolist>
	<misc name="Output">
		<entry name="int">
			<description>
				When a <m>bang</m> is received in the left inlet, <o>ta.random</o> generates a random number between the lower and upper limit, inclusively, meaning that it can output numbers equal to the lower or upper limit.
			</description>
		</entry>
	</misc>
</c74object>
